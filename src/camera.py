# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Camera.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import cv2
import numpy as np
import imutils
import time
from time import sleep
import math
from std_msgs.msg import String,Float32
from sensor_msgs.msg import Joy


global hma,hmi,sma,smi,vma,vmi,kmi,kma,it,itd,okmi,okma
hma=0
hmi=0
sma=0
smi=0
vma=0
vmi=0
kmi=0
kma=0
it=0
itd=0
okmi=0
okma=0
class Ui_Form(object):
    global hma,hmi,sma,smi,vma,vmi,kmi,kma,it,itd,okmi,okma
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(692, 619)
        self.label_1 = QtWidgets.QLabel(Form)
        self.label_1.setGeometry(QtCore.QRect(30, 40, 311, 261))
        self.label_1.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_1.setText("")
        self.label_1.setObjectName("label_1")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(370, 40, 311, 261))
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.horizontalSlider_3 = QtWidgets.QSlider(Form)
        self.horizontalSlider_3.setGeometry(QtCore.QRect(110, 410, 160, 16))
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.horizontalSlider_3.setMinimum(-255)
        self.horizontalSlider_3.setMaximum(255)
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(40, 330, 61, 20))
        self.label_3.setObjectName("label_3")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(40, 450, 61, 21))
        self.label_6.setObjectName("label_6")
        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setGeometry(QtCore.QRect(30, 530, 81, 20))
        self.label_8.setObjectName("label_8")
        self.lineEdit_3 = QtWidgets.QLineEdit(Form)
        self.lineEdit_3.setGeometry(QtCore.QRect(280, 410, 61, 25))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.horizontalSlider_6 = QtWidgets.QSlider(Form)
        self.horizontalSlider_6.setGeometry(QtCore.QRect(110, 530, 160, 16))
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        self.horizontalSlider_6.setMinimum(-255)
        self.horizontalSlider_6.setMaximum(255)
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(40, 410, 61, 20))
        self.label_5.setObjectName("label_5")
        self.lineEdit_6 = QtWidgets.QLineEdit(Form)
        self.lineEdit_6.setGeometry(QtCore.QRect(280, 530, 61, 25))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_2 = QtWidgets.QLineEdit(Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(280, 370, 61, 25))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalSlider_4 = QtWidgets.QSlider(Form)
        self.horizontalSlider_4.setGeometry(QtCore.QRect(110, 450, 160, 16))
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.horizontalSlider_4.setMinimum(-255)
        self.horizontalSlider_4.setMaximum(255)
        self.horizontalSlider_2 = QtWidgets.QSlider(Form)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(110, 370, 160, 16))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.horizontalSlider_2.setMinimum(-179)
        self.horizontalSlider_2.setMaximum(179)
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(30, 490, 81, 20))
        self.label_7.setObjectName("label_7")
        self.lineEdit_5 = QtWidgets.QLineEdit(Form)
        self.lineEdit_5.setGeometry(QtCore.QRect(280, 490, 61, 25))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_1 = QtWidgets.QLineEdit(Form)
        self.lineEdit_1.setGeometry(QtCore.QRect(280, 330, 61, 25))
        self.lineEdit_1.setObjectName("lineEdit_1")
        self.horizontalSlider_1 = QtWidgets.QSlider(Form)
        self.horizontalSlider_1.setGeometry(QtCore.QRect(110, 330, 160, 16))
        self.horizontalSlider_1.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_1.setObjectName("horizontalSlider_1")
        self.horizontalSlider_1.setMinimum(0)
        self.horizontalSlider_1.setMaximum(179)
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(40, 370, 71, 20))
        self.label_4.setObjectName("label_4")
        self.horizontalSlider_5 = QtWidgets.QSlider(Form)
        self.horizontalSlider_5.setGeometry(QtCore.QRect(110, 490, 160, 16))
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")
        self.horizontalSlider_5.setMinimum(0)
        self.horizontalSlider_5.setMaximum(255)
        self.lineEdit_4 = QtWidgets.QLineEdit(Form)
        self.lineEdit_4.setGeometry(QtCore.QRect(280, 450, 61, 25))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_7 = QtWidgets.QLineEdit(Form)
        self.lineEdit_7.setGeometry(QtCore.QRect(610, 330, 61, 25))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.horizontalSlider_10 = QtWidgets.QSlider(Form)
        self.horizontalSlider_10.setGeometry(QtCore.QRect(440, 450, 160, 16))
        self.horizontalSlider_10.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_10.setObjectName("horizontalSlider_10")
        self.horizontalSlider_10.setMinimum(0)
        self.horizontalSlider_10.setMaximum(10)
        self.horizontalSlider_12 = QtWidgets.QSlider(Form)
        self.horizontalSlider_12.setGeometry(QtCore.QRect(440, 530, 160, 16))
        self.horizontalSlider_12.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_12.setObjectName("horizontalSlider_12")
        self.horizontalSlider_12.setMinimum(0)
        self.horizontalSlider_12.setMaximum(5000)
        self.label_9 = QtWidgets.QLabel(Form)
        self.label_9.setGeometry(QtCore.QRect(390, 450, 31, 21))
        self.label_9.setObjectName("label_9")
        self.horizontalSlider_9 = QtWidgets.QSlider(Form)
        self.horizontalSlider_9.setGeometry(QtCore.QRect(440, 410, 160, 16))
        self.horizontalSlider_9.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_9.setObjectName("horizontalSlider_9")
        self.horizontalSlider_9.setMinimum(0)
        self.horizontalSlider_9.setMaximum(10)
        self.horizontalSlider_11 = QtWidgets.QSlider(Form)
        self.horizontalSlider_11.setGeometry(QtCore.QRect(440, 490, 160, 16))
        self.horizontalSlider_11.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_11.setObjectName("horizontalSlider_11")
        self.horizontalSlider_11.setMinimum(0)
        self.horizontalSlider_11.setMaximum(10)
        self.label_10 = QtWidgets.QLabel(Form)
        self.label_10.setGeometry(QtCore.QRect(370, 330, 61, 20))
        self.label_10.setObjectName("label_10")
        self.lineEdit_8 = QtWidgets.QLineEdit(Form)
        self.lineEdit_8.setGeometry(QtCore.QRect(610, 450, 61, 25))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.label_11 = QtWidgets.QLabel(Form)
        self.label_11.setGeometry(QtCore.QRect(370, 530, 61, 20))
        self.label_11.setObjectName("label_11")
        self.horizontalSlider_7 = QtWidgets.QSlider(Form)
        self.horizontalSlider_7.setGeometry(QtCore.QRect(440, 330, 160, 16))
        self.horizontalSlider_7.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_7.setObjectName("horizontalSlider_7")
        self.horizontalSlider_7.setMinimum(0)
        self.horizontalSlider_7.setMaximum(10)
        self.horizontalSlider_8 = QtWidgets.QSlider(Form)
        self.horizontalSlider_8.setGeometry(QtCore.QRect(440, 370, 160, 16))
        self.horizontalSlider_8.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_8.setObjectName("horizontalSlider_8")
        self.horizontalSlider_8.setMinimum(0)
        self.horizontalSlider_8.setMaximum(10)
        self.lineEdit_9 = QtWidgets.QLineEdit(Form)
        self.lineEdit_9.setGeometry(QtCore.QRect(610, 410, 61, 25))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.lineEdit_10 = QtWidgets.QLineEdit(Form)
        self.lineEdit_10.setGeometry(QtCore.QRect(610, 490, 61, 25))
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.label_12 = QtWidgets.QLabel(Form)
        self.label_12.setGeometry(QtCore.QRect(390, 410, 21, 20))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(Form)
        self.label_13.setGeometry(QtCore.QRect(370, 370, 71, 20))
        self.label_13.setObjectName("label_13")
        self.lineEdit_11 = QtWidgets.QLineEdit(Form)
        self.lineEdit_11.setGeometry(QtCore.QRect(610, 370, 61, 25))
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.label_14 = QtWidgets.QLabel(Form)
        self.label_14.setGeometry(QtCore.QRect(370, 490, 61, 20))
        self.label_14.setObjectName("label_14")
        self.lineEdit_12 = QtWidgets.QLineEdit(Form)
        self.lineEdit_12.setGeometry(QtCore.QRect(610, 530, 61, 25))
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.label_15 = QtWidgets.QLabel(Form)
        self.label_15.setGeometry(QtCore.QRect(360, 550, 91, 20))
        self.label_15.setObjectName("label_15")

        self.retranslateUi(Form)
        self.horizontalSlider_1.sliderMoved['int'].connect(self.HUEMIN)
        self.horizontalSlider_2.sliderMoved['int'].connect(self.HUEMAX)
        self.horizontalSlider_3.sliderMoved['int'].connect(self.SATMIN)
        self.horizontalSlider_4.sliderMoved['int'].connect(self.SATMAX)
        self.horizontalSlider_5.sliderMoved['int'].connect(self.VALUEMIN)
        self.horizontalSlider_6.sliderMoved['int'].connect(self.VALUEMAX)
        self.horizontalSlider_7.sliderMoved['int'].connect(self.KERMIN)
        self.horizontalSlider_8.sliderMoved['int'].connect(self.KERMAX)
        self.horizontalSlider_9.sliderMoved['int'].connect(self.ITE)
        self.horizontalSlider_10.sliderMoved['int'].connect(self.ITED)
        self.horizontalSlider_11.sliderMoved['int'].connect(self.OKER)
        self.horizontalSlider_12.sliderMoved['int'].connect(self.AREA)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.h_mi= (self.horizontalSlider_1.value())
        self.lineEdit_1.setText(str(self.h_mi))
        self.h_ma= (self.horizontalSlider_2.value())
        self.lineEdit_2.setText(str(self.h_ma))
        self.s_mi= (self.horizontalSlider_3.value())
        self.lineEdit_3.setText(str(self.s_mi))
        self.s_ma= (self.horizontalSlider_4.value())
        self.lineEdit_4.setText(str(self.s_ma))
        self.v_mi= (self.horizontalSlider_5.value())
        self.lineEdit_5.setText(str(self.v_mi))
        self.v_ma= (self.horizontalSlider_6.value())
        self.lineEdit_6.setText(str(self.v_ma))
        self.kmi= (self.horizontalSlider_7.value())
        self.lineEdit_7.setText(str(self.kmi))
        self.kma= (self.horizontalSlider_8.value())
        self.lineEdit_11.setText(str(self.kma))
        self.it= (self.horizontalSlider_9.value())
        self.lineEdit_9.setText(str(self.it))
        self.itd= (self.horizontalSlider_10.value())
        self.lineEdit_8.setText(str(self.itd))
        self.okmi= (self.horizontalSlider_11.value())
        self.lineEdit_10.setText(str(self.okmi))
        self.okma= (self.horizontalSlider_12.value())
        self.lineEdit_11.setText(str(self.okma))
    
    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_3.setText(_translate("Form", "HUE Min"))
        self.label_6.setText(_translate("Form", "SAT Max"))
        self.label_8.setText(_translate("Form", "VALUE Max"))
        self.label_5.setText(_translate("Form", "SAT Min"))
        self.label_7.setText(_translate("Form", "VALUE Min"))
        self.label_4.setText(_translate("Form", "HUE Max"))
        self.label_9.setText(_translate("Form", "ited"))
        self.label_10.setText(_translate("Form", "ker Min"))
        self.label_11.setText(_translate("Form", "Area Min"))
        self.label_12.setText(_translate("Form", "ite"))
        self.label_13.setText(_translate("Form", "ker Max"))
        self.label_14.setText(_translate("Form", "oker Min"))
        self.label_15.setText(_translate("Form", "de deteccion"))
        
    def HUEMIN(self):
        global hmi
        self.h_mi= (self.horizontalSlider_1.value())
        hmi=self.h_mi
        self.lineEdit_1.setText(str(self.h_mi))
        print("HUEMIN")
        
    
    def HUEMAX(self):
        global hma
        self.h_ma= (self.horizontalSlider_2.value())
        hma=self.h_ma
        self.lineEdit_2.setText(str(self.h_ma))
        self.start_video()
        print("HUEMAX")

    def SATMIN(self):
        global smi
        self.s_mi= (self.horizontalSlider_3.value())
        smi=self.s_mi
        self.lineEdit_3.setText(str(self.s_mi))
        print("SATMIN")
    
    def SATMAX(self):
        global sma
        self.s_ma= (self.horizontalSlider_4.value())
        sma=self.s_ma
        self.lineEdit_4.setText(str(self.s_ma))
        print("SATMAX")
    
    def VALUEMIN(self):
        global vmi
        self.v_mi= (self.horizontalSlider_5.value())
        vmi=self.v_mi
        self.lineEdit_5.setText(str(self.v_mi))
        print("VALUEMIN")

    def VALUEMAX(self):
        global vma
        self.v_ma= (self.horizontalSlider_6.value())
        vma=self.v_ma
        self.lineEdit_6.setText(str(self.v_ma))
        print("VALUEMAX")
    
    def KERMIN(self):
        global kmi
        self.kmi= (self.horizontalSlider_7.value())
        kmi=self.kmi
        self.lineEdit_7.setText(str(self.kmi))
        print("KERMIN")
    
    def KERMAX(self):
        global kma
        self.kma= (self.horizontalSlider_8.value())
        kma=self.kma
        self.lineEdit_11.setText(str(self.kma))
        print("KERMAX")

    def ITE(self):
        global it
        self.it= (self.horizontalSlider_9.value())
        it=self.it
        self.lineEdit_9.setText(str(self.it))
        print("ITE")
    
    def ITED(self):
        global itd
        self.itd= (self.horizontalSlider_10.value())
        itd=self.itd
        self.lineEdit_8.setText(str(self.itd))
        print("ITED")
    
    def OKER(self):
        global kmi
        self.okmi= (self.horizontalSlider_11.value())
        kmi=self.okmi
        self.lineEdit_10.setText(str(self.okmi))
        print("KER")

    def AREA(self):
        global kma
        self.okma= (self.horizontalSlider_12.value())
        kma=self.okma
        self.lineEdit_12.setText(str(self.okma))
        print("AREA")
    
    def start_video(self):
        self.Work = Work()
        self.Work.start()
        self.Work.Imageupd.connect(self.Imageupd_slot)

    def Imageupd_slot(self, Image):
        self.label_1.setPixmap(QPixmap.fromImage(Image))

    def cancel(self):
        self.label_1.clear()
        self.Work.stop()
   
    def salir(self):
        print ("slider")
    


class Work(QThread):
    Imageupd = pyqtSignal(QImage)
    def run(self):
        self.linea=0
        self.Ui=Ui_Form()
        self.hilo_corriendo = True
        cap = cv2.VideoCapture(2)
        while self.hilo_corriendo:
            ret, frame = cap.read()
            ret,img = cap.read()
            if ret:
                self.hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
                self.h_mi = hmi
                self.h_ma = hma
                self.s_mi = smi
                self.s_ma = sma
                self.v_mi = vmi
                self.v_ma = vma
                self.kmi = kmi
                self.kma = kma
                self.it = it
                self.itd = itd
                self.okmi = kmi
                self.okma = kma
                self.lower_blue = np.array([ self.h_mi,  self.s_mi,  self.v_mi])
                self.upper_blue = np.array([ self.h_ma,  self.s_ma,  self.v_ma])
                self.kernel = np.ones(( self.kmi,  self.kma), np.uint8)
                self.okernel = np.ones(( self.okmi,  self.okma), np.uint8)
                self.erosion = cv2.erode( self.hsv,  self.kernel, iterations= self.it)
                self.dilation = cv2.dilate( self.erosion,  self.kernel, iterations= self.itd)
                
                self.opening = cv2.morphologyEx(self.dilation, cv2.MORPH_OPEN,self.okernel)
                self.closing = cv2.morphologyEx(self.opening, cv2.MORPH_CLOSE, self.kernel)

                self.mask = cv2.inRange(self.closing, self.lower_blue, self.upper_blue)
                self.result = cv2.bitwise_and(img, img, mask=self.mask)
                # imgray = cv2.cvtColor(mask, cv2.COLOR_BGR2GRAY)
                ret, self.thresh1 = cv2.threshold(self.mask, 127, 255, 0)
                self.contours, self.hierarchy = cv2.findContours(self.thresh1, 1, 2)
                cv2.drawContours(self.result, self.contours, -1, (0, 255, 0), 3)
                
                # cv2.imshow("mask", mask)
                self.linea_x=cv2.line(img, (320,0), (320,640), (0, 0, 0), 2)
                self.linea_y=cv2.line(img, (0,240), (640,240), (0, 0, 0), 2)
                cv2.imshow("Original",self.linea)
                # cv2.imshow("hsv", hsv)


                if len(self.contours) > 0:
                    # Processing here.

                    cnt = self.contours[0]
                    # print(cnt)
                    # M = cv2.moments(cnt)
                    # print(M)
                    # cx = int(M['m10'] / M['m00'])
                    # cy = int(M['m01'] / M['m00'])
                    self.area = cv2.contourArea(cnt)
                    #print("area is: " + str(area))
                    self.perimeter = cv2.arcLength(cnt, True)
                    #print("perimeter is: " + str(perimeter))

                    self.epsilon = 0.1 * cv2.arcLength(cnt, True)
                    # print("elipson is: "+ str(epsilon))
                    self.approx = cv2.approxPolyDP(cnt, self.epsilon, True)
                    # print("approx is: " +str(approx))
                    self.area_approx = cv2.contourArea(self.approx)
                    #print("area_approx is: " + str(area_approx))
                    self.hull = cv2.convexHull(cnt)
                    self.area_hull = cv2.contourArea(self.hull)
                    #print("area_hull is: " + str(area_hull))
                    self.k = cv2.isContourConvex(cnt)
                    x, y, w, h = cv2.boundingRect(cnt)
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

                else:
                    print
                    "Sorry No contour Found."

                cv2.imshow("result",self.result)




                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                blurred = cv2.GaussianBlur(gray, (5, 5), 3)
                self.thresh = cv2.threshold(blurred, 60, 255, cv2.THRESH_BINARY)[1]
                #cv2.imshow("thresh",thresh)
                cnts = cv2.findContours(mask, cv2.RETR_EXTERNAL,
                                        cv2.CHAIN_APPROX_SIMPLE)
                cnts = imutils.grab_contours(cnts)
                #contours = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                #contours = imutils.grab_contours(contours)
                
                # loop over the contours
                for c in cnts:
                    if cv2.contourArea(c) > okma:
                        # compute the center of the contour
                        M = cv2.moments(c)
                        cX = int(M["m10"] / M["m00"])
                        cY = int(M["m01"] / M["m00"])
                        # draw the contour and center of the shape on the image
                        #cv2.drawContours(img, [c], -1, (0, 255, 0), 2)
                        cv2.circle(img, (cX, cY), 7, (255, 255, 255), -1)
                        cv2.putText(img, "center", (cX - 20, cY - 20),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
                        x_medium = int((x + x + w) / 2)
                        y_medium = int((y + y + h) / 2)
                        cv2.line(img, (x_medium, 0), (x_medium, 480), (0, 0, 255), 2)
                        cv2.line(img, (0,y_medium), ( 640, y_medium), (0, 0, 255), 2)


                        
                    break
                
                
                if x_medium < center - 30:
                        position += 1
                elif x_medium > center + 30:
                        position -= 1
                print(center)
                print("X_position is: ",x_medium)
                print("Y_position is: ",y_medium)

                print("position is: " + str(position))
                cv2.imshow("Original",img)

                #talker()
                #talker2()
                #talker3()
            
                #if LT==-1:
                #photo()
                
                #if LB==1:
                #video()

                #if vid==1:
                #salida.write(frame)

               # if B==1:
                 #   vid=0
                
            # _.img= im.read(cv2.VideoCapture("http://192.168.0.172:8080/video"))
            
                #cv2.imshow("thresh", thresh)
                #blurred_frame = cv2.GaussianBlur(frame, (5, 5), 0)
                
                #GPIO.output(SEÑAL1,0)
                #GPIO.output(SEÑAL2,0)   
                    
                if x_medium>=280 and x_medium<=350: #ESTANDAR 300,330
                    print("OBJECT FOUND")
                #zePIO.output(SEÑAL1,1)
                
            #     if x_medium>=150 and x_medium<=450:
            #        print("OBJECT IN FRAME")
            #        GPIO.output(SEÑAL2,1)
                
                else:
                    print("SEARCHING OBJECT")
                #GPIO.output(SEÑAL1,0)


                Image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                flip = cv2.flip(Image, 1)
                convertir_QT = QImage(flip.data, flip.shape[1], flip.shape[0], QImage.Format_RGB888)
                pic = convertir_QT.scaled(640, 240, Qt.KeepAspectRatio)
                self.Imageupd.emit(pic)
    def stop(self):
        self.hilo_corriendo = False
        self.quit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
