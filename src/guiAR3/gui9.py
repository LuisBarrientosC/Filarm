# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from math import pi
from std_msgs.msg import String, Float32
from moveit_commander.conversions import pose_to_list
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Joy
import os
import subprocess 
from signal import SIGKILL
#-------------------QT IMPORTS----------------------------------
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import cv2
from T1 import Ui_trayectoria1
from T2 import Ui_trayectoria2
from T3 import Ui_trayectoria3
from T4 import Ui_trayectoria4
from T5 import Ui_trayectoria5
from T6 import Ui_trayectoria6
from MC import Ui_CENTRAR
import time




class Ui_GUI_FMA(object):
      
    def T1(self):

        self.window=QtWidgets.QWidget()
        self.ui= Ui_trayectoria1()
        self.ui.setupUi(self.window)
        self.window.show()
        os.system("gnome-terminal -e 'bash -c \"python CAM.py\"'")
        
        

    def T2(self):
        #os.system("gnome-terminal -e 'bash -c \"python CAM.py\"'")
        #self.f=open("PIDT1.py", "r")
        #self.PID1=int(self.f.readline ())
        #print(self.PID1)
        #print("This process has the PID", self.PID1)
        #self.f.close()

        #os.kill(self.PID1, SIGKILL)
        os.system("gnome-terminal -e 'bash -c \"python CAM.py\"'")
        self.window=QtWidgets.QWidget()
        self.ui= Ui_trayectoria2()
        self.ui.setupUi(self.window)
        self.window.show()

    def T3(self):
        os.system("gnome-terminal -e 'bash -c \"python CAM.py\"'")
        self.window=QtWidgets.QWidget()
        self.ui= Ui_trayectoria3()
        self.ui.setupUi(self.window)
        self.window.show()
    def T4(self):
        os.system("gnome-terminal -e 'bash -c \"python CAM.py\"'")
        self.window=QtWidgets.QWidget()
        self.ui= Ui_trayectoria4()
        self.ui.setupUi(self.window)
        self.window.show()
    def T5(self):
        os.system("gnome-terminal -e 'bash -c \"python CAM.py\"'")
        self.window=QtWidgets.QWidget()
        self.ui= Ui_trayectoria5()
        self.ui.setupUi(self.window)
        self.window.show()
    def T6(self):
        os.system("gnome-terminal -e 'bash -c \"python CAM.py\"'")
        self.window=QtWidgets.QWidget()
        self.ui= Ui_trayectoria6()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, GUI_FMA):
        GUI_FMA.setObjectName("GUI_FMA")
        GUI_FMA.resize(682, 750)
        GUI_FMA.setStyleSheet("")
        self.pushButton = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton.setGeometry(QtCore.QRect(370, 160, 151, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_2.setGeometry(QtCore.QRect(370, 210, 151, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_3.setGeometry(QtCore.QRect(500, 670, 71, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label = QtWidgets.QLabel(GUI_FMA)
        self.label.setGeometry(QtCore.QRect(370, 310, 21, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(GUI_FMA)
        self.label_2.setGeometry(QtCore.QRect(370, 350, 21, 20))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(GUI_FMA)
        self.label_3.setGeometry(QtCore.QRect(370, 390, 21, 20))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(GUI_FMA)
        self.label_4.setGeometry(QtCore.QRect(370, 430, 21, 20))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(GUI_FMA)
        self.label_5.setGeometry(QtCore.QRect(370, 470, 21, 20))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(GUI_FMA)
        self.label_6.setGeometry(QtCore.QRect(370, 510, 21, 20))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(GUI_FMA)
        self.label_7.setGeometry(QtCore.QRect(370, 550, 21, 20))
        self.label_7.setObjectName("label_7")
        self.pushButton_4 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_4.setGeometry(QtCore.QRect(530, 160, 131, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_5.setGeometry(QtCore.QRect(410, 670, 81, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.lineEdit = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit.setGeometry(QtCore.QRect(560, 310, 61, 25))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_2.setGeometry(QtCore.QRect(560, 350, 61, 25))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_3.setGeometry(QtCore.QRect(560, 390, 61, 25))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_6 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_6.setGeometry(QtCore.QRect(560, 550, 61, 25))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.lineEdit_7 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_7.setGeometry(QtCore.QRect(560, 510, 61, 25))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_8.setGeometry(QtCore.QRect(560, 430, 61, 25))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_9 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_9.setGeometry(QtCore.QRect(560, 470, 61, 25))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.horizontalSlider = QtWidgets.QSlider(GUI_FMA)
        self.horizontalSlider.setGeometry(QtCore.QRect(390, 310, 160, 16))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setMinimum(-170)
        self.horizontalSlider.setMaximum(170)
        self.horizontalSlider_2 = QtWidgets.QSlider(GUI_FMA)
        self.horizontalSlider_2.setGeometry(QtCore.QRect(390, 350, 160, 16))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.horizontalSlider_2.setMinimum(-40)
        self.horizontalSlider_2.setMaximum(90)
        self.horizontalSlider_3 = QtWidgets.QSlider(GUI_FMA)
        self.horizontalSlider_3.setGeometry(QtCore.QRect(390, 390, 160, 16))
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.horizontalSlider_3.setMinimum(0)
        self.horizontalSlider_3.setMaximum(144)
        self.horizontalSlider_4 = QtWidgets.QSlider(GUI_FMA)
        self.horizontalSlider_4.setGeometry(QtCore.QRect(390, 430, 160, 16))
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.horizontalSlider_4.setMinimum(-165)
        self.horizontalSlider_4.setMaximum(165)
        self.horizontalSlider_5 = QtWidgets.QSlider(GUI_FMA)
        self.horizontalSlider_5.setGeometry(QtCore.QRect(390, 470, 160, 16))
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")
        self.horizontalSlider_5.setMinimum(-104)
        self.horizontalSlider_5.setMaximum(104)
        self.horizontalSlider_6 = QtWidgets.QSlider(GUI_FMA)
        self.horizontalSlider_6.setGeometry(QtCore.QRect(390, 550, 160, 16))
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        self.horizontalSlider_6.setMinimum(-148)
        self.horizontalSlider_6.setMaximum(148)
        self.horizontalSlider_7 = QtWidgets.QSlider(GUI_FMA)
        self.horizontalSlider_7.setGeometry(QtCore.QRect(390, 510, 160, 16))
        self.horizontalSlider_7.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_7.setObjectName("horizontalSlider_7")
        self.horizontalSlider_7.setMinimum(-148)
        self.horizontalSlider_7.setMaximum(148)
        self.label_8 = QtWidgets.QLabel(GUI_FMA)
        self.label_8.setGeometry(QtCore.QRect(170, 0, 341, 51))
        self.label_8.setStyleSheet("font: 75 11pt \"Sans\";\n"
"")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(GUI_FMA)
        self.label_9.setGeometry(QtCore.QRect(370, 270, 261, 17))
        self.label_9.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(GUI_FMA)
        self.label_10.setGeometry(QtCore.QRect(20, 90, 321, 261))
        self.label_10.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.pushButton_8 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_8.setGeometry(QtCore.QRect(60, 510, 111, 31))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_9.setGeometry(QtCore.QRect(180, 510, 111, 31))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_10.setGeometry(QtCore.QRect(180, 550, 111, 31))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_11.setGeometry(QtCore.QRect(60, 550, 111, 31))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_12.setGeometry(QtCore.QRect(60, 590, 111, 31))
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_13 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_13.setGeometry(QtCore.QRect(180, 590, 111, 31))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_14.setGeometry(QtCore.QRect(220, 360, 41, 31))
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_16 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_16.setGeometry(QtCore.QRect(270, 360, 41, 31))
        self.pushButton_16.setObjectName("pushButton_16")
        self.label_11 = QtWidgets.QLabel(GUI_FMA)
        self.label_11.setGeometry(QtCore.QRect(40, 370, 171, 17))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(GUI_FMA)
        self.label_12.setGeometry(QtCore.QRect(80, 480, 201, 17))
        self.label_12.setStyleSheet("gridline-color: rgb(0, 255, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(GUI_FMA)
        self.label_13.setGeometry(QtCore.QRect(20, 60, 201, 17))
        self.label_13.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(GUI_FMA)
        self.label_14.setGeometry(QtCore.QRect(350, 720, 161, 21))
        self.label_14.setObjectName("label_14")
        self.lineEdit_4 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_4.setGeometry(QtCore.QRect(520, 720, 121, 21))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_15 = QtWidgets.QLabel(GUI_FMA)
        self.label_15.setGeometry(QtCore.QRect(20, 720, 161, 17))
        self.label_15.setObjectName("label_15")
        self.lineEdit_5 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_5.setGeometry(QtCore.QRect(190, 720, 121, 21))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_16 = QtWidgets.QLabel(GUI_FMA)
        self.label_16.setGeometry(QtCore.QRect(40, 410, 161, 17))
        self.label_16.setObjectName("label_16")
        self.pushButton_17 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_17.setGeometry(QtCore.QRect(270, 400, 41, 31))
        self.pushButton_17.setObjectName("pushButton_17")
        self.pushButton_15 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_15.setGeometry(QtCore.QRect(220, 400, 41, 31))
        self.pushButton_15.setObjectName("pushButton_15")
        self.label_17 = QtWidgets.QLabel(GUI_FMA)
        self.label_17.setGeometry(QtCore.QRect(40, 450, 181, 17))
        self.label_17.setObjectName("label_17")
        self.pushButton_18 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_18.setGeometry(QtCore.QRect(220, 440, 91, 31))
        self.pushButton_18.setStyleSheet("")
        self.pushButton_18.setObjectName("pushButton_18")
        self.label_18 = QtWidgets.QLabel(GUI_FMA)
        self.label_18.setGeometry(QtCore.QRect(370, 130, 171, 17))
        self.label_18.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_18.setObjectName("label_18")
        self.pushButton_6 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_6.setGeometry(QtCore.QRect(530, 210, 131, 41))
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_19 = QtWidgets.QLabel(GUI_FMA)
        self.label_19.setGeometry(QtCore.QRect(370, 60, 191, 17))
        self.label_19.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_19.setObjectName("label_19")
        self.pushButton_7 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_7.setGeometry(QtCore.QRect(370, 90, 111, 27))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_19 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_19.setGeometry(QtCore.QRect(490, 90, 81, 27))
        self.pushButton_19.setObjectName("pushButton_19")
        self.label_20 = QtWidgets.QLabel(GUI_FMA)
        self.label_20.setGeometry(QtCore.QRect(70, 640, 231, 20))
        self.label_20.setStyleSheet("gridline-color: rgb(0, 255, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.label_20.setObjectName("label_20")
        self.checkBox_3 = QtWidgets.QCheckBox(GUI_FMA)
        self.checkBox_3.setGeometry(QtCore.QRect(150, 670, 41, 25))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_2 = QtWidgets.QCheckBox(GUI_FMA)
        self.checkBox_2.setGeometry(QtCore.QRect(110, 670, 41, 25))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox = QtWidgets.QCheckBox(GUI_FMA)
        self.checkBox.setGeometry(QtCore.QRect(70, 670, 41, 25))
        self.checkBox.setObjectName("checkBox")
        self.pushButton_20 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_20.setGeometry(QtCore.QRect(190, 670, 41, 27))
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_21 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_21.setGeometry(QtCore.QRect(240, 670, 41, 27))
        self.pushButton_21.setObjectName("pushButton_21")
        self.pushButton_22 = QtWidgets.QPushButton(GUI_FMA)
        self.pushButton_22.setGeometry(QtCore.QRect(580, 90, 91, 27))
        self.pushButton_22.setObjectName("pushButton_22")
        self.label_21 = QtWidgets.QLabel(GUI_FMA)
        self.label_21.setGeometry(QtCore.QRect(370, 640, 191, 19))
        self.label_21.setObjectName("label_21")
        self.lineEdit_10 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_10.setGeometry(QtCore.QRect(560, 640, 61, 25))
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.label_22 = QtWidgets.QLabel(GUI_FMA)
        self.label_22.setGeometry(QtCore.QRect(370, 580, 111, 19))
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(GUI_FMA)
        self.label_23.setGeometry(QtCore.QRect(370, 610, 111, 19))
        self.label_23.setObjectName("label_23")
        self.lineEdit_11 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_11.setGeometry(QtCore.QRect(480, 610, 61, 25))
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.lineEdit_12 = QtWidgets.QLineEdit(GUI_FMA)
        self.lineEdit_12.setGeometry(QtCore.QRect(480, 580, 61, 25))
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.label_24 = QtWidgets.QLabel(GUI_FMA)
        self.label_24.setGeometry(QtCore.QRect(560, 580, 79, 19))
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(GUI_FMA)
        self.label_25.setGeometry(QtCore.QRect(560, 610, 79, 19))
        self.label_25.setObjectName("label_25")
        #---------------------MOTORES---------------------------------
        self.M1=0.0
        self.M2=0.0
        self.M3=0.0
        self.M4=0.0
        self.M5=0.0
        self.M6=0.0
        #---------------------MODO AUTOMATICO---------------------------------
        self.MJ1=0.0
        self.MJ2=0.0
        self.MJ3=0.0
        self.counter=0
        self.counter1=0
        self.counter2=0
        self.counter4=0
        self.on=0
        #--------------------BOTONES---------------------------------
        self.xbox_status=0
        self.counter=0
        self.A=0.0   
        self.B=0.0  
        self.X=0.0
        self.Y=0.0
        self.RB=0.0
        self.LB=0.0
        self.DI=0.0  #Boton derecha/izquierda
        self.UD=0.0  #Boton UP/DOWN
        self.SQ=0.0 
        self.img_counter=0
        self.xp=0
        self.c=0
        self.Ac=0.1
        self.Ve=0.1
        self.Tm=0.5
        #--------------------------------------------------------------
        self.retranslateUi(GUI_FMA)
        self.pushButton_3.clicked.connect(self.RESET)
        self.pushButton.clicked.connect(self.modomanual)
        self.pushButton_2.clicked.connect(self.modoautomatico)
        self.pushButton_4.clicked.connect(self.modoremoto)
        self.pushButton_5.clicked.connect(self.planear)
        self.lineEdit.editingFinished.connect(self.valorJ1)
        self.lineEdit_2.editingFinished.connect(self.valorJ2)
        self.lineEdit_3.editingFinished.connect(self.valorJ3)
        self.lineEdit_8.editingFinished.connect(self.valorJ4)
        self.lineEdit_9.editingFinished.connect(self.valorJ5)
        self.lineEdit_7.editingFinished.connect(self.valorJ6)
        self.lineEdit_6.editingFinished.connect(self.valorJ7)
        self.horizontalSlider.sliderMoved['int'].connect(self.J1)
        self.horizontalSlider_2.sliderMoved['int'].connect(self.J2)
        self.horizontalSlider_3.sliderMoved['int'].connect(self.J3)
        self.horizontalSlider_4.sliderMoved['int'].connect(self.J4)
        self.horizontalSlider_5.sliderMoved['int'].connect(self.J5)
        self.horizontalSlider_7.sliderMoved['int'].connect(self.J6)
        self.horizontalSlider_6.sliderMoved['int'].connect(self.J7)
        self.pushButton_14.clicked.connect(self.ON)
        self.pushButton_16.clicked.connect(self.OFF)
        self.pushButton_8.clicked.connect(self.T1)
        self.pushButton_11.clicked.connect(self.T2)
        self.pushButton_12.clicked.connect(self.T3)
        self.pushButton_9.clicked.connect(self.T4)
        self.pushButton_10.clicked.connect(self.T5)
        self.pushButton_13.clicked.connect(self.T6)
        self.pushButton_17.clicked.connect(self.OFFV)
        self.pushButton_15.clicked.connect(self.ONV)
        self.pushButton_18.clicked.connect(self.CAPTURAR)
        self.pushButton_6.clicked.connect(self.modocentrado)
        self.checkBox.clicked.connect(self.motor1)
        self.checkBox_2.clicked.connect(self.motor2)
        self.checkBox_3.clicked.connect(self.motor3)
        self.pushButton_20.clicked.connect(self.ONA)
        self.pushButton_21.clicked.connect(self.OFFA)
        self.pushButton_7.clicked.connect(self.calibrar)
        self.pushButton_19.clicked.connect(self.moveit)
        self.pushButton_22.clicked.connect(self.conectar)
        self.lineEdit_12.editingFinished.connect(self.Velocidad)
        self.lineEdit_11.editingFinished.connect(self.Aceleracion)
        self.lineEdit_10.editingFinished.connect(self.Tiempo)
        QtCore.QMetaObject.connectSlotsByName(GUI_FMA)
        rospy.Subscriber("joy", Joy, self.control) 
        rospy.Subscriber('position_state_x', Float32, self.state_x)
        rospy.Subscriber('position_state_y', Float32, self.state_y)
    def retranslateUi(self, GUI_FMA):
        _translate = QtCore.QCoreApplication.translate
        GUI_FMA.setWindowTitle(_translate("GUI_FMA", "Form"))
        self.pushButton.setText(_translate("GUI_FMA", "Modo Manual"))
        self.pushButton_2.setText(_translate("GUI_FMA", "Modo Automático"))
        self.pushButton_3.setText(_translate("GUI_FMA", "RESET"))
        self.label.setText(_translate("GUI_FMA", "J1"))
        self.label_2.setText(_translate("GUI_FMA", "J2"))
        self.label_3.setText(_translate("GUI_FMA", "J3"))
        self.label_4.setText(_translate("GUI_FMA", "J4"))
        self.label_5.setText(_translate("GUI_FMA", "J5"))
        self.label_6.setText(_translate("GUI_FMA", "J6"))
        self.label_7.setText(_translate("GUI_FMA", "J7"))
        self.pushButton_4.setText(_translate("GUI_FMA", "Modo Remoto"))
        self.pushButton_5.setText(_translate("GUI_FMA", "PLANEAR"))
        self.label_8.setText(_translate("GUI_FMA", "<html><head/><body><p><span style=\" font-size:20pt;\">FILMMAKER ROBOT ARM</span></p></body></html>"))
        self.label_9.setText(_translate("GUI_FMA", "Control de posición de motores:"))
        self.pushButton_8.setText(_translate("GUI_FMA", "Trayectoria1"))
        self.pushButton_9.setText(_translate("GUI_FMA", "Trayectoria4"))
        self.pushButton_10.setText(_translate("GUI_FMA", "Trayectoria5"))
        self.pushButton_11.setText(_translate("GUI_FMA", "Trayectoria2"))
        self.pushButton_12.setText(_translate("GUI_FMA", "Trayectoria3"))
        self.pushButton_13.setText(_translate("GUI_FMA", "Trayectoria6"))
        self.pushButton_14.setText(_translate("GUI_FMA", "ON"))
        self.pushButton_16.setText(_translate("GUI_FMA", "OFF"))
        self.label_11.setText(_translate("GUI_FMA", " Control de Cámara :"))
        self.label_12.setText(_translate("GUI_FMA", "Control de trayectorias:"))
        self.label_13.setText(_translate("GUI_FMA", "Visualizador de Cámara: "))
        self.label_14.setText(_translate("GUI_FMA", "Modo de operación:"))
        self.label_15.setText(_translate("GUI_FMA", "Estado de  Cámara:"))
        self.label_16.setText(_translate("GUI_FMA", " Control de Video:"))
        self.pushButton_17.setText(_translate("GUI_FMA", "OFF"))
        self.pushButton_15.setText(_translate("GUI_FMA", "ON"))
        self.label_17.setText(_translate("GUI_FMA", " Control de fotografía:"))
        self.pushButton_18.setText(_translate("GUI_FMA", "Capturar"))
        self.label_18.setText(_translate("GUI_FMA", "Modos de operación:"))
        self.pushButton_6.setText(_translate("GUI_FMA", "Modo Centrado"))
        self.label_19.setText(_translate("GUI_FMA", "Configuracion general:"))
        self.pushButton_7.setText(_translate("GUI_FMA", "Calibración"))
        self.pushButton_19.setText(_translate("GUI_FMA", "Moveit"))
        self.label_20.setText(_translate("GUI_FMA", "Modo Automatico:(Motores)"))
        self.checkBox_3.setText(_translate("GUI_FMA", "J3"))
        self.checkBox_2.setText(_translate("GUI_FMA", "J2"))
        self.checkBox.setText(_translate("GUI_FMA", "J1"))
        self.pushButton_20.setText(_translate("GUI_FMA", "ON"))
        self.pushButton_21.setText(_translate("GUI_FMA", "OFF"))
        self.pushButton_22.setText(_translate("GUI_FMA", "Conexión"))
        self.label_21.setText(_translate("GUI_FMA", "Tiempo de planeacion:"))
        self.label_22.setText(_translate("GUI_FMA", "Velocidad:"))
        self.label_23.setText(_translate("GUI_FMA", "Aceleracion:"))
        self.label_24.setText(_translate("GUI_FMA", "(0-100%)"))
        self.label_25.setText(_translate("GUI_FMA", "(0-100%)"))

    def calibrar(self):
        os.system("gnome-terminal -e 'bash -c \"roslaunch ar3_hardware_interface ar3_hardware_bringup.launch\"'")
    def moveit(self):
        os.system("gnome-terminal -e 'bash -c \"roslaunch ar3_moveit_config ar3_moveit_bringup.launch\"'")
    def conectar(self):

        self.robot = moveit_commander.RobotCommander()
        self.scene = moveit_commander.PlanningSceneInterface()
        self.group_name = "manipulator"
        self.move_group = moveit_commander.MoveGroupCommander(self.group_name)

        self.planning_frame = self.move_group.get_planning_frame()
        print("============ Planning frame: %s" % self.planning_frame)

        # We can also print the name of the end-effector link for this group:
        self.eef_link = self.move_group.get_end_effector_link()
        print("============ End effector link: %s" % self.eef_link)

        # We can get a list of all the groups in the robot:
        self.group_names = self.robot.get_group_names()
        print("============ Available Planning Groups:", self.robot.get_group_names())

        # Sometimes for debugging it is useful to print the entire state of the
        # robot:
        print("============ Printing robot state")
        print(self.robot.get_current_state())
        print("")

        self.joint_goal = self.move_group.get_current_joint_values()

        self.M1=int(self.joint_goal[0]*68)    #  // radians
        self.M2=int(self.joint_goal[1]*65)      #  // radians-0.6   1.37
        self.M3=int(self.joint_goal[2]*57.6)    #  // radians 0 2.5
        self.M4=int(self.joint_goal[3]*61.11)  #  // radians -2.7 
        self.M5=int(self.joint_goal[4]*57.78)  
        self.M6=int(self.joint_goal[5]*64.35) 

        self.lineEdit.setText(str(self.M1))
        self.lineEdit_2.setText(str(self.M2))
        self.lineEdit_3.setText(str(self.M3))
        self.lineEdit_8.setText(str(self.M4))
        self.lineEdit_9.setText(str(self.M5))
        self.lineEdit_7.setText(str(self.M6))
        self.lineEdit_6.setText(str("0.0"))
        self.lineEdit_4.setText(str("Manual"))
        self.lineEdit_5.setText(str("Apagada"))

        self.horizontalSlider.setValue(self.M1)
        self.horizontalSlider_2.setValue(self.M2)
        self.horizontalSlider_3.setValue(self.M3)
        self.horizontalSlider_4.setValue(self.M4)
        self.horizontalSlider_5.setValue(self.M5)
        self.horizontalSlider_7.setValue(self.M6)

        self.lineEdit_11.setText(str(10))
        self.lineEdit_12.setText(str(10))
        self.lineEdit_10.setText(str(0.5))

          
    def CAPTURAR(self):
        self.Work.foto()
        
    def ONV(self):
        self.Work.video()
        self.lineEdit_5.setText(str("Grabando"))
        print ("VideoON")

    def OFFV(self):
        self.Work.OFFvid()
        self.lineEdit_5.setText(str("Encendida"))
        print ("VideoOFF")

    def ON(self):
        self.Work = Work()
        self.Work.start()
        self.Work.Imageupd.connect(self.Imageupd_slot)
        self.lineEdit_5.setText(str("Encendido"))
   
    def Imageupd_slot(self, Image):
        self.label_10.setPixmap(QPixmap.fromImage(Image))
        
    def OFF(self):
        self.lineEdit_5.setText(str("Apagada"))
        self.label_10.clear()
        self.Work.OFF()
    
    def RESET(self):

        self.M1=-10
        self.M2=0
        self.M3=80
        self.M4=0
        self.M5=72
        self.M6=102
        
        self.plano()

        self.lineEdit.setText(str(self.M1))
        self.lineEdit_2.setText(str(self.M2))
        self.lineEdit_3.setText(str(self.M3))
        self.lineEdit_8.setText(str(self.M4))
        self.lineEdit_9.setText(str(self.M5))
        self.lineEdit_7.setText(str(self.M6))
        
        self.horizontalSlider.setValue(self.M1)
        self.horizontalSlider_2.setValue(self.M2)
        self.horizontalSlider_3.setValue(self.M3)
        self.horizontalSlider_4.setValue(self.M4)
        self.horizontalSlider_5.setValue(self.M5)
        self.horizontalSlider_7.setValue(self.M6)
    
        print ("Posicion de inicio")

    def modocentrado(self):
        
        self.window=QtWidgets.QWidget()
        self.ui= Ui_CENTRAR()
        self.ui.setupUi(self.window)
        self.window.show()

        os.system("gnome-terminal -e 'bash -c \"python3 image_publisher34.py\"'")
        self.M1=-10
        self.M2=0
        self.M3=80
        self.M4=0
        self.M5=72
        self.M6=102
        
        self.plano()

        self.lineEdit.setText(str(self.M1))
        self.lineEdit_2.setText(str(self.M2))
        self.lineEdit_3.setText(str(self.M3))
        self.lineEdit_8.setText(str(self.M4))
        self.lineEdit_9.setText(str(self.M5))
        self.lineEdit_7.setText(str(self.M6))
        
        self.horizontalSlider.setValue(self.M1)
        self.horizontalSlider_2.setValue(self.M2)
        self.horizontalSlider_3.setValue(self.M3)
        self.horizontalSlider_4.setValue(self.M4)
        self.horizontalSlider_5.setValue(self.M5)
        self.horizontalSlider_7.setValue(self.M6)
        #cmd='python3 image_publisher3.py'
        #p=subprocess.Popen(cmd, shell=True)
        #p.communicate()
        self.xbox_status=3
        self.lineEdit_4.setText(str("Centrado"))
        print ("Remoto")

    def modomanual(self):
        self.M1= (self.horizontalSlider.value())
        self.lineEdit.setText(str(self.M1))
        self.M2= (self.horizontalSlider_2.value())
        self.lineEdit_2.setText(str(self.M2))
        self.M3= (self.horizontalSlider_3.value())
        self.lineEdit_3.setText(str(self.M3))
        self.M4= (self.horizontalSlider_4.value())
        self.lineEdit_8.setText(str(self.M4))
        self.M5= (self.horizontalSlider_5.value())
        self.lineEdit_9.setText(str(self.M5))
        self.M6= (self.horizontalSlider_7.value())
        self.lineEdit_7.setText(str(self.M6))
        self.xbox_status=0
        self.lineEdit_4.setText(str("Manual"))
        print(self.M1)
        print(self.M2)
        print(self.M3)
        print(self.M4)
        print(self.M5)
        print(self.M6)
        print ("Modo manual_GUI")
    
    def modoremoto(self):
        os.system("gnome-terminal -e 'bash -c \"rosrun joy joy_node\"'")
        self.M1= (self.horizontalSlider.value())
        self.lineEdit.setText(str(self.M1))
        self.M2= (self.horizontalSlider_2.value())
        self.lineEdit_2.setText(str(self.M2))
        self.M3= (self.horizontalSlider_3.value())
        self.lineEdit_3.setText(str(self.M3))
        self.M4= (self.horizontalSlider_4.value())
        self.lineEdit_8.setText(str(self.M4))
        self.M5= (self.horizontalSlider_5.value())
        self.lineEdit_9.setText(str(self.M5))
        self.M6= (self.horizontalSlider_7.value())
        self.lineEdit_7.setText(str(self.M6))
        self.xbox_status=1
        self.lineEdit_4.setText(str("Remoto"))
        print(self.M1)
        print(self.M2)
        print(self.M3)
        print(self.M4)
        print(self.M5)
        print(self.M6)
        print ("MODO_MANUAL_XBOX")
    
    def modoautomatico(self):
        os.system("gnome-terminal -e 'bash -c \"python3 image_publisher33.py\"'")
        os.system("gnome-terminal -e 'bash -c \"python MAUTOMATICO.py\"'")
        self.M1=-10
        self.M2=0
        self.M3=80
        self.M4=0
        self.M5=72
        self.M6=102
        self.Ac=1
        self.Ve=1
        self.Tm=2
        self.lineEdit_11.setText(str(100))
        self.lineEdit_12.setText(str(100))
        self.lineEdit_10.setText(str(2))
        
        self.plano()

        self.lineEdit.setText(str(self.M1))
        self.lineEdit_2.setText(str(self.M2))
        self.lineEdit_3.setText(str(self.M3))
        self.lineEdit_8.setText(str(self.M4))
        self.lineEdit_9.setText(str(self.M5))
        self.lineEdit_7.setText(str(self.M6))
        
        self.horizontalSlider.setValue(self.M1)
        self.horizontalSlider_2.setValue(self.M2)
        self.horizontalSlider_3.setValue(self.M3)
        self.horizontalSlider_4.setValue(self.M4)
        self.horizontalSlider_5.setValue(self.M5)
        self.horizontalSlider_7.setValue(self.M6)
        #os.system('python3 image_publisher3.py')
        self.xbox_status=2
        self.lineEdit_4.setText(str("Automatico"))
        print ("Modo automatico")
    
    def Aceleracion(self):
         self.Aci= float(self.lineEdit_11.text())
         self.Ac= (self.Aci/100)
   
    def Velocidad(self): 
         self.Vei= float(self.lineEdit_12.text())
         self.Ve= (self.Vei/100)
  
    def Tiempo(self):
        self.Tm=float(self.lineEdit_10.text())
         
    def planear(self):
        self.plano()
        print ("PLANEAR") 

    def valorJ1(self):
        self.iM1=(self.lineEdit.text())
        self.M1=float(self.iM1)
        self.horizontalSlider.setValue(self.M1)
        print(self.M1)
        print ("J1")       

    def valorJ2(self):
        self.iM2=(self.lineEdit_2.text())
        self.M2=float(self.iM2)
        self.horizontalSlider_2.setValue(self.M2)
        print(self.M2)
        print ("J2")       

    def valorJ3(self):
        self.iM3=(self.lineEdit_3.text())
        self.M3=float(self.iM3)
        self.horizontalSlider_3.setValue(self.M3)
        print(self.M3)
        print ("J3")  

    def valorJ4(self):
        self.iM4=(self.lineEdit_8.text())
        self.M4=float(self.iM4)
        self.horizontalSlider_4.setValue(self.M4)
        print(self.M4)
        print ("J4")  

    def valorJ5(self):
        self.iM5=(self.lineEdit_9.text())
        self.M5=float(self.iM5)
        self.horizontalSlider_5.setValue(self.M5)
        print(self.M5)  
        print ("J5")  

    def valorJ6(self):
        self.iM6=(self.lineEdit_7.text())
        self.M6=float(self.iM6)
        self.horizontalSlider_7.setValue(self.M6)
        print(self.M6) 
        print ("J6")  

    def valorJ7(self):
        #self.iM67=int(self.lineEdit_6.text())
        #self.M71=float(self.iM61)/64.35
        #print(self.M61) 
        print ("J7")  

    def J1(self):
        float (self.M1)
        self.M1= (self.horizontalSlider.value())
        self.lineEdit.setText(str(self.horizontalSlider.value()))

    def J2(self):
        float (self.M2)
        self.M2= (self.horizontalSlider_2.value())
        self.lineEdit_2.setText(str(self.M2))

    def J3(self):
        float (self.M3)
        self.M3= (self.horizontalSlider_3.value())
        self.lineEdit_3.setText(str(self.M3))

    def J4(self):
        float (self.M4)
        self.M4= (self.horizontalSlider_4.value())
        self.lineEdit_8.setText(str(self.M4))

    def J5(self):
        float (self.M5)
        self.M5= (self.horizontalSlider_5.value())
        self.lineEdit_9.setText(str(self.M5))

    def J6(self):
        float (self.M6)
        self.M6= (self.horizontalSlider_7.value())
        self.lineEdit_7.setText(str(self.M6))

    def J7(self):
        print("FUERA DE SERVICIO")
        print(self.xbox_status)
    #    float (self.M7)
    #    self.M7= (self.horizontalSlider_7.value())
    #    self.lineEdit_6.setText(str(self.M7))
    def motor1(self):
        
        if self.counter==0:
            self.MJ1=1
            print(self.MJ1)
            self.counter+=1
        else:
            self.MJ1=0
            self.counter=0
            print(self.MJ1) 
        print("motor1")

    def motor2(self):
        
        if self.counter1==0:
            self.MJ2=1
            print(self.MJ2)
            self.counter1+=1
        else:
            self.MJ2=0
            self.counter1=0
            print(self.MJ2)
        
        print("motor2")
        
    def motor3(self):
        
        if self.counter2==0:
            self.MJ3=1
            print(self.MJ3)
            self.counter2+=1
        else:
            self.MJ3=0
            self.counter2=0
            print(self.MJ3)
        
        print("motor3")
    def ONA(self):
        self.on=1 
        print(self.on)
        print("start")
    def OFFA(self):
        self.on=0
        print(self.on)
        print("stop")

    def plano(self):
       
        print('Entre a la funcion planear')
        # We can get the joint values from the group and adjust some of the values:
        self.joint_goal = self.move_group.get_current_joint_values()
        print(self.joint_goal)

        # joint_goal[1] = 0
        # joint_goal[2] = 0
        # joint_goal[3] = 0
        # joint_goal[4] = 0
        # joint_goal[5] = 0
        # joint_goal[6] = 0
       
        #cambiar joint values
        self.joint_goal[0] = float(self.M1)/68    #  // radians
        self.joint_goal[1] = float(self.M2)/65    #  // radians-0.6   1.37
        self.joint_goal[2] = float(self.M3)/57.6  #  // radians 0 2.5
        self.joint_goal[3] = float(self.M4)/61.11 #  // radians -2.7 
        self.joint_goal[4] = float(self.M5)/57.78 #  // radians 1.8
        self.joint_goal[5] = float(self.M6)/64.35 #  // radians 2.3
        
       
        # The go command can be called with joint values, poses, or without any
        # parameters if you have already set the pose or joint target for the group
        self.move_group.set_max_acceleration_scaling_factor(self.Ac)
        self.move_group.set_max_velocity_scaling_factor(self.Ve)
        self.move_group.set_joint_value_target(self.joint_goal)
        self.plan = self.move_group.go( wait=True)
        #plan = move_group.go(joint_goal, wait=True)
        print("after planning")
        # Calling ``stop()`` ensures that there is no residual movement
        self.move_group.stop()
        #joint_goal[0] =1.57  #;  // radians
        #joint_goal[1] = 0.0 #;  // radians
        #joint_goal[2] = 0.0 #;  // radians
        #joint_goal[3] = 0.0 #  // radians
        #joint_goal[4] = 0.0 #;  // radians
        #joint_goal[5] = 0.0 #;  // radians
        #move_group.execute(plan,  wait=True)
        #move_group.set_joint_value_target(joint_goal)
        # plan = move_group.go( wait=True)
        rospy.sleep(self.Tm)                                            
        print("end")
    
    def state_x(self,data):
        
        if self.xbox_status==2:
            
            if self.MJ1==1 and self.on==1:
                self.xp=data.data
                self.xpi= 320-self.xp
                print(self.xpi)
                #-------------------------------------------------------------------
                #if self.xpi <-15: 
                    
                #    self.M1 += -((self.xpi*0.01)/8.4)*68
                #    self.plano()
                
                #if self.xpi >15: 
                #    self.M1 += -((self.xpi*0.01)/8.4)*68
                #    self.plano()
                #---------------------------------------------------------------------------
                if self.xpi< - 15 and self.xpi > -50 :
                        self.M1 +=0.01*68
                        self.plano()

                if self.xpi< -50 :
                        self.M1 +=0.03*68
                        self.plano()

                if self.xpi> 15 and self.xpi < 50 :
                        self.M1 -=0.01*68
                        self.plano()

                if self.xpi> 50 :
                        self.M1 -=0.03*68
                        self.plano()
                
        return self.xp

    def state_y(self,data): 

        if self.xbox_status==2:

            if  self.MJ2==1 and self.MJ3==0 and self.on==1:
                self.yp=data.data
                
                self.ypi= 240-self.yp
                print(self.ypi)
                
                
                if self.ypi < -20 and self.ypi>-100: #and M3 != 2 and M2<=1.4:
                        self.M2 +=0.01*65 #RAD
                        self.plano()
                if self.ypi < -100: #and M3 != 2 and M2<=1.4:
                        self.M2 +=0.03*65 #RAD
                        self.plano()
                #if M3==2:
                #	while M3 >= 0.5 and ypi < -20 and M2 <= 1.4 : 
                #		M2 +=0.02 #RAD
                #		M3 -=0.02 #RAD
                        #                planear()

                if self.ypi > 20 and self.ypi < 100  : #and M2 != -1 and M3< 1:
                        self.M2 -=0.01*65  #RAD
                        self.plano()

                if self.ypi > 100: #and M2 != -1 and M3< 1:
                        self.M2 -=0.03*65#RAD
                        self.plano()
        

            if  self.MJ2==0 and self.MJ3==1 and self.on==1:
                self.yp=data.data
                
                self.ypi= 240-self.yp
                print(self.ypi)
                
                
                if self.ypi < -20 and self.ypi>-100: #and M3 != 2 and M2<=1.4:
                        self.M3 +=0.01*57.6 #RAD
                        self.plano()
                if self.ypi < -100: #and M3 != 2 and M2<=1.4:
                        self.M3 +=0.03*57.6  #RAD
                        self.plano()
                #if M3==2:
                #	while M3 >= 0.5 and ypi < -20 and M2 <= 1.4 : 
                #		M2 +=0.02 #RAD
                #		M3 -=0.02 #RAD
                        #                planear()

                if self.ypi > 20 and self.ypi < 100  : #and M2 != -1 and M3< 1:
                        self.M3 -=0.01*57.6  #RAD
                        self.plano()

                if self.ypi > 100: #and M2 != -1 and M3< 1:
                        self.M3 -=0.03*57.6  #RAD
                        self.plano()
        
        if  self.MJ2==1 and self.MJ3==1 and self.on==1:
                
                self.yp=data.data
                
                self.ypi= 240-self.yp
                print(self.ypi)
                print(self.M3)
                print(self.M2)

                if self.ypi < -20 and self.ypi>-100 and self.M3 <= 142 and self.M2<=85: #and self.M3 >= 83:
                        self.M2 +=0.01*65 #RAD
                        self.M3 +=0.01*57.6 
                        print("Entre a -20")
                        self.plano()
                if self.ypi < -100  and self.M3 <= 142 and self.M2<=85: # and self.M3 >= 83:
                        self.M2 +=0.03*65  #RAD
                        self.M3 +=0.03*57.6 
                        print("Entre a -100")
                        self.plano()

                if self.ypi > 20 and self.ypi<100  and self.M3 >= 1 and self.M2>=-35: #and self.M3 <= 83:
                        self.M2 -=0.01*65 #RAD
                        self.M3 -=0.01*57.6 
                        print("Entre a -20")
                        self.plano()
                if self.ypi > 100  and self.M3 >= 1 and self.M2>=-35: #and self.M3 >= 83:
                        self.M2 -=0.03*65  #RAD
                        self.M3 -=0.03*57.6 
                        print("Entre a -100")
                        self.plano()
                #if self.M3==2:
                	#while self.M3 >= 0.5*57.6 and self.ypi < -20 and self.M2 <= 1.4*65 :
                                #self.M2 +=0.02*65 #RAD
                                #self.M3 -=0.02*57.6 #RAD
                                #self.plano()

                #if self.ypi > 20 and self.ypi < 100 and self.M2 != -1*65 and self.M3< 1*57.6:
                        #self.M3 -=0.01*57.6  #RAD
                        #self.plano()

                #if self.ypi > 100 and self.M2 != -1*65 and self.M3< 1*57.6:
                        #self.M3 -=0.03*57.6  #RAD
                        #self.plano()

    def control(self,data):

        self.A=data.buttons[0]  #Obtencion de los datos de los botones del control xbox
        self.B=data.buttons[1]
        self.X=data.buttons[2]
        self.Y=data.buttons[3]
        self.RB=data.buttons[5]
        self.LB=data.buttons[4]
        self.SQ=data.buttons[6]
        self.LL=data.buttons[7]
        self.UD=data.axes[7]
        self.DI=data.axes[6]
        
        #print(self.xbox_status) 

        if self.xbox_status==1:

            if self.A==1 and self.DI==1 and self.M1<=2.0*68:           #Condiciones de los botones del xbox para 
                self.M1+=0.2*68  #;  // radians   #establecer cuantos radianes se movera el robot. 
                self.lineEdit.setText(str(self.M1))
                self.horizontalSlider.setValue(self.M1)
                print(self.M1)
                print("xbox_Control")
                self.plano()
        
            if self.A==1 and self.DI==-1 :
                self.M1+=-0.2*68  #;  // radians
                self.lineEdit.setText(str(self.M1))
                self.horizontalSlider.setValue(self.M1)
                print("xbox_Control")
                self.plano()
            
            if self.B==1 and self.UD==1 :
                self.M2-=0.1*65  #;  // radians
                self.lineEdit_2.setText(str(self.M2))
                self.horizontalSlider_2.setValue(self.M2)
                print("xbox_Control")
                self.plano()

            if self.B==1 and self.UD==-1 :
                self.M2+=0.1*65  #;  // radians
                self.lineEdit_2.setText(str(self.M2))
                self.horizontalSlider_2.setValue(self.M2)
                print("xbox_Control")
                self.plano()

            if self.Y==1 and self.UD==1 and self.M3>=0.1 :
                self.M3-=0.1*57.6 #;  // radians
                self.lineEdit_3.setText(str(self.M3))
                self.horizontalSlider_3.setValue(self.M3)
                print("xbox_Control")
                self.plano()

            if self.Y==1 and self.UD==-1 :
                self.M3+=0.1*57.6  #;  // radians
                self.lineEdit_3.setText(str(self.M3))
                self.horizontalSlider_3.setValue(self.M3)
                print("xbox_Control")
                self.plano()
            
            if self.X==1 and self.DI==1 :
                self.M4+=0.1*61.11 #;  // radians
                self.lineEdit_8.setText(str(self.M4))
                self.horizontalSlider_4.setValue(self.M4)
                print("xbox_Control")
                self.plano()

            if self.X==1 and self.DI==-1 :
                self.M4+=-0.1*61.11  #;  // radians
                self.lineEdit_8.setText(str(self.M4))
                self.horizontalSlider_4.setValue(self.M4)
                print("xbox_Control")
                self.plano()

            if self.RB==1 and self.UD==1 :
                self.M5-=0.1*57.78  #;  // radians
                self.lineEdit_9.setText(str(self.M5))
                self.horizontalSlider_5.setValue(self.M5)
                print("xbox_Control")
                self.plano()

            if self.RB==1 and self.UD==-1 :
                self.M5+=0.1*57.78  #;  // radians
                self.lineEdit_9.setText(str(self.M5))
                self.horizontalSlider_5.setValue(self.M5)
                print("xbox_Control")
                self.plano()

            if self.LB==1 and self.DI==1 :
                self.M6+=0.1*64.35  #;  // radians
                self.lineEdit_7.setText(str(self.M6))
                self.horizontalSlider_7.setValue(self.M6)
                print("xbox_Control")
                self.plano()

            if self.LB==1 and self.DI==-1 :
                self.M6+=-0.1*64.35  #;  // radians
                self.lineEdit_7.setText(str(self.M6))
                self.horizontalSlider_7.setValue(self.M6)
                print("xbox_Control")
                self.plano()
            
            if self.SQ==1:
                self.Work.foto()
                print("FOTO") 
                time.sleep(0.5)
            
            if self.LL==1:
                self.counter4+=1
                print(self.counter4)

                if self.counter4==1:
                    self.Work.video()
                    self.lineEdit_5.setText(str("Grabando"))
                    print ("VideoON")
                    time.sleep(1)
                
                if self.counter4==2:
                    self.Work.OFFvid()
                    self.lineEdit_5.setText(str("Encendida"))
                    print ("VideoOFF")
                    self.counter4=0
                    time.sleep(1)
               
     

class Work(QThread):
    img_counter=0
    vi_counter=0
    vid=0
    Imageupd = pyqtSignal(QImage)
    def run(self):
        self.hilo_corriendo = True
        cap = cv2.VideoCapture(2)
        while self.hilo_corriendo:
            ret, self.frame = cap.read()
            if ret:
                Image = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                flip = cv2.flip(Image, 1)
                convertir_QT = QImage(flip.data, flip.shape[1], flip.shape[0], QImage.Format_RGB888)
                pic = convertir_QT.scaled(640, 240, Qt.KeepAspectRatio)
                self.Imageupd.emit(pic)
                if self.vid==1:
                   self.salida.write(self.frame)

    def OFF(self):
        self.hilo_corriendo = False
        self.quit()
    
    def foto(self):
    
        self.img_name = "imagen_{}.png".format(self.img_counter) 
        cv2.imwrite(self.img_name, self.frame)
        print("{} written!".format(self.img_name)) 
        self.img_counter += 1  
        
    def video(self):
        if self.vid==0:
            if self.vi_counter==0:
                codecs = cv2.VideoWriter_fourcc(*'mp4v')
                self.salida = cv2.VideoWriter('video_{}.mp4'.format(self.vi_counter),codecs,20.0,(640,480))
            self.vi_counter+=1
            self.vid=1

    def OFFvid(self):
        codecs = cv2.VideoWriter_fourcc(*'mp4v')
        self.salida = cv2.VideoWriter('videoGUI_{}.mp4'.format(self.vi_counter),codecs,20.0,(640,480))
        self.vid=0

if __name__ == "__main__":
    import sys

    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('robot_plan', anonymous=True)
    rospy.loginfo("robot_plan")
    
    app = QtWidgets.QApplication(sys.argv)
    GUI_FMA = QtWidgets.QWidget()
    ui = Ui_GUI_FMA()
    ui.setupUi(GUI_FMA)
    GUI_FMA.show()
    sys.exit(app.exec_())
