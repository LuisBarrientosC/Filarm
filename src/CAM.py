# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CAM.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import cv2
import os

class Ui_CAM(object):
    def setupUi(self, CAM):
        CAM.setObjectName("CAM")
        CAM.resize(339, 364)
        self.label_23 = QtWidgets.QLabel(CAM)
        self.label_23.setGeometry(QtCore.QRect(120, 310, 91, 17))
        self.label_23.setObjectName("label_23")
        self.pushButton_19 = QtWidgets.QPushButton(CAM)
        self.pushButton_19.setGeometry(QtCore.QRect(60, 330, 41, 31))
        self.pushButton_19.setObjectName("pushButton_19")
        self.pushButton_20 = QtWidgets.QPushButton(CAM)
        self.pushButton_20.setGeometry(QtCore.QRect(230, 330, 41, 31))
        self.pushButton_20.setObjectName("pushButton_20")
        self.label_24 = QtWidgets.QLabel(CAM)
        self.label_24.setGeometry(QtCore.QRect(10, 310, 71, 17))
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(CAM)
        self.label_25.setGeometry(QtCore.QRect(10, 40, 321, 261))
        self.label_25.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_25.setText("")
        self.label_25.setObjectName("label_25")
        self.pushButton_21 = QtWidgets.QPushButton(CAM)
        self.pushButton_21.setGeometry(QtCore.QRect(280, 330, 41, 31))
        self.pushButton_21.setObjectName("pushButton_21")
        self.pushButton_14 = QtWidgets.QPushButton(CAM)
        self.pushButton_14.setGeometry(QtCore.QRect(10, 330, 41, 31))
        self.pushButton_14.setObjectName("pushButton_14")
        self.label_26 = QtWidgets.QLabel(CAM)
        self.label_26.setGeometry(QtCore.QRect(70, 10, 201, 17))
        self.label_26.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_26.setObjectName("label_26")
        self.pushButton_22 = QtWidgets.QPushButton(CAM)
        self.pushButton_22.setGeometry(QtCore.QRect(120, 330, 91, 31))
        self.pushButton_22.setStyleSheet("")
        self.pushButton_22.setObjectName("pushButton_22")
        self.label_27 = QtWidgets.QLabel(CAM)
        self.label_27.setGeometry(QtCore.QRect(230, 310, 61, 17))
        self.label_27.setObjectName("label_27")
        
        #self.PID1=os.getpid()
        #print("This process has the PID", self.PID1)
        #self.f=open("PIDT1.py", "w")
        #self.f.write (str(self.PID1))
        #self.f.close()

        self.retranslateUi(CAM)
        self.pushButton_14.clicked.connect(self.ONCAM)
        self.pushButton_19.clicked.connect(self.OFFCAM)
        self.pushButton_22.clicked.connect(self.CAPTURAR)
        self.pushButton_20.clicked.connect(self.ONVIDEO)
        self.pushButton_21.clicked.connect(self.OFFVIDEO)
        QtCore.QMetaObject.connectSlotsByName(CAM)

    def retranslateUi(self, CAM):
        _translate = QtCore.QCoreApplication.translate
        CAM.setWindowTitle(_translate("CAM", "Form"))
        self.label_23.setText(_translate("CAM", "Fotografía:"))
        self.pushButton_19.setText(_translate("CAM", "OFF"))
        self.pushButton_20.setText(_translate("CAM", "ON"))
        self.label_24.setText(_translate("CAM", "Cámara:"))
        self.pushButton_21.setText(_translate("CAM", "OFF"))
        self.pushButton_14.setText(_translate("CAM", "ON"))
        self.label_26.setText(_translate("CAM", "Visualizador de Cámara: "))
        self.pushButton_22.setText(_translate("CAM", "Capturar"))
        self.label_27.setText(_translate("CAM", "Video:"))
    
    def CAPTURAR(self):
        self.Work.foto()
        
    def ONVIDEO(self):
        self.Work.video()
        #self.lineEdit_5.setText(str("Grabando"))
        print ("Video")

    def OFFVIDEO(self):
        self.Work.OFFvid()
        #self.lineEdit_5.setText(str("Encendida"))
        print ("Video")

    def ONCAM(self):
        self.Work = Work()
        self.Work.start()
        self.Work.Imageupd.connect(self.Imageupd_slot)
        #self.lineEdit_5.setText(str("Encendido"))
   
    def Imageupd_slot(self, Image):
        self.label_25.setPixmap(QPixmap.fromImage(Image))
        
    def OFFCAM(self):
        #self.lineEdit_5.setText(str("Apagada"))
        self.label_25.clear()
        self.Work.OFF()

class Work(QThread):
    img_counter=0
    vi_counter=0
    vid=0
    Imageupd = pyqtSignal(QImage)
    def run(self):
        self.hilo_corriendo = True
        cap = cv2.VideoCapture(2)
        while self.hilo_corriendo:
            ret, self.frame = cap.read()
            if ret:
                if self.vid==1:
                    self.salida.write(self.frame)
                Image = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                flip = cv2.flip(Image, 1)
                convertir_QT = QImage(flip.data, flip.shape[1], flip.shape[0], QImage.Format_RGB888)
                pic = convertir_QT.scaled(640, 240, Qt.KeepAspectRatio)
                self.Imageupd.emit(pic)
    def OFF(self):
        self.hilo_corriendo = False
        self.quit()
    
    def foto(self):
    
        self.img_name = "imagen_{}.png".format(self.img_counter) 
        cv2.imwrite(self.img_name, self.frame)
        print("{} written!".format(self.img_name)) 
        self.img_counter += 1  
        #print ("Video")
    
    def video(self):
        if self.vid==0:
            if self.vi_counter==0:
                codecs = cv2.VideoWriter_fourcc(*'mp4v')
                self.salida = cv2.VideoWriter('video_{}.mp4'.format(self.vi_counter),codecs,20.0,(640,480))
            self.vi_counter+=1
            self.vid=1

    def OFFvid(self):
        codecs = cv2.VideoWriter_fourcc(*'mp4v')
        self.salida = cv2.VideoWriter('videoT1_{}.mp4'.format(self.vi_counter),codecs,20.0,(640,480))
        self.vid=0
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CAM = QtWidgets.QWidget()
    ui = Ui_CAM()
    ui.setupUi(CAM)
    CAM.show()
    sys.exit(app.exec_())
